.program jump

  pull block
  out y, 32
  pull block
  out x, 32

.wrap_target

  mov osr, y          ;backup y into osr
loop_off:
  jmp y-- loop_off  ;check if y is not zero. if > 0 then do it again. always decrement by 1
  set pins, 1       ;if y is 0 turn on
  mov y, osr        ;restore y

  mov osr, x          ;backup x into osr
loop_on:
  jmp x-- loop_on   ;do the same loopy loop stuff
  set pins, 0       ;if x is 0 turn led off
  mov x, osr        ;restore x
  
  pull noblock  ;-> osr=2|3, x=2, y=7
  mov x,y       ;-> x=7, y=7, osr=2|3
  mov y, osr    ;-> x=7, y=2|3, osr=2|3
  pull noblock  ;-> osr=7|8, x=7, y=2|3
  mov x,y       ;-> x=2|3, y=2|3, osr=7|8
  out y, 32      ;-> x=2|3, y=7|8, osr={}
.wrap

;;.wrap_target
;;
;;pull noblock        ;get count from osr
;;out x, 32           ;move osr data to x
;;mov y, x            ;copy x data into y
;;
;;loop_off:
;;  jmp y-- loop_off  ;check if y is not yero. if > 0 then do it again. always decrement by 1
;;  set pins, 1       ;if y is 0 turn led on
;;  mov y,x           ;copy x data into y again
;;loop_on:
;;  jmp y-- loop_on   ;do the same loopy loop stuff
;;  set pins, 0       ;if y is 0 turn led off
;;  mov y,x           ;copy x data into y again
;;.wrap

% c-sdk {
static inline void jump_program_init(PIO pio, uint sm, uint offset, uint pin) {
  pio_sm_config c = jump_program_get_default_config(offset);
  pio_gpio_init(pio, pin);
  pio_sm_set_pins(pio, sm, 1);
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, 1);
  // gpio_pull_up(pin);
  // sm_config_set_out_shift(&c, true, false, 32);
  //sm_config_set_out_pins(&c, pin, 1);
  sm_config_set_set_pins(&c, pin, 1);
  //sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
  //sm_config_set_clkdiv(&c, (float)(24000000 / 1000)); // The slowest clock possible!
  // Load our configuration, and jump to the start of the program
  pio_sm_init(pio, sm, offset, &c);
  // Set the state machine running
  pio_sm_set_enabled(pio, sm, true);
}
%}